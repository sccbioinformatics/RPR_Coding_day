# The problem

The algorithm I have decided to use is the one given to my students on the R programming I course. It is clustering expression data using simulated annealing. It's a simple algorithm to understand and program, but is has enough scope where solutions can vary widely. It also contains what most of what we need to know about a language, file reading, control flow, containers, maths, plotting etc.

## The data

For this problem we will use yeast cell-cycle data which is small timecourse dataset of 250 genes and 16 timepoints. You can get the data [here](https://github.com/shambam/R_programming_1/blob/main/Spellman_Yeast_Cell_Cycle.tsv). Yeast in liquid culture have been arrested at the same point in cell-cycle, and then released so they undergo two cell divisions in synchrony. They were sampled at 16 timepoints and then arrayed. This means there are some nice looking clusters in the data and will be clear if your implementation is working.


## Simulated annealing

We can think of well clustered data having low energy, in that each cluster is tight and has little within cluster variance. If we calculate the variance *within* each cluster and sum over all clusters we get the total variance (energy) of the system. To measure the distance between two genes $i$ and $j$ over $t$ timepoints we do:

$$d_{ij}=\sqrt{\sum{(g^{i}_t-g^{j}_t)^2}}$$

so to measure the energy (total variance) of a clustering we sum the pairwise distances for each cluster $K$, and then sum over all $K$s and them divide by $K$.

$$ E(K)=\frac{1}{K}\sum^K_{k=1} \left[ \sum_{i\epsilon Ck}\sum_{j\epsilon Ck} d_{ij}\right] $$

For a well clustered data, $E(K)$ should be as **small** as possible. Lets say we have 1000 genes, and we want to partition them into 10 clusters. The number of combinations is too high for us to try each one to brute force a true $E$. This is why we use a *heuristic* algorithm to get us as close to the solution as possible in a smaller amount of time.

If we tried to visualise the energy landscape we can imagine it might look something like this:

```{r, out.width='60%', fig.align='center',echo=FALSE}
knitr::include_graphics(rep("images/EnergyLandscape.png"))
```

The idea behind simulated annealing is that "bad" moves are also allowed for a proportion of the iterations allowing exploration of the energy landscape, thereby avoiding local minima.

## The algorithm

**The first thing you need to do is rescale each gene (row) of the data so the smallest value is given 0, and the highest value is given 1.**

Lets go through the process of the algorithm. To do this you need 4 parameters:

1. The temperature of the system $Temp$
2. Cooling factor $cool$
3. Number of clusters $K$
4. How many iterations to perform $I$.


Algorithm goes:

&nbsp;&nbsp;&nbsp;&nbsp;Randomly assign each gene to one of your K clusters.

for each iteration $I$ {

&nbsp;&nbsp;&nbsp;&nbsp;Calculate $E$. Call this $E_{old}$
    
&nbsp;&nbsp;&nbsp;&nbsp;Randomly select a single gene and assign it randomly to another cluster.
  
&nbsp;&nbsp;&nbsp;&nbsp;Calculate $E_{new}$
    
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($E_{new}$ < $E_{old}$) {accept the move}
    
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($E_{new} > E_{old})$ {if($e^{-\frac{E_{new}-E_{old}}{Temp}} > R(0,1)$) {accept the move} }
        
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else{reject the move}
  
&nbsp;&nbsp;&nbsp;&nbsp;Set a new $Temp$ by doing $Temp=Temp \times cool$
}

Done

$R(0,1)$ is a randomly generated number from a uniform distribution that lies between 0 and 1.


## Things to do

1. Code this algorithm using the given yeast timecourse data.
2. Put this algorithm into a function that takes data, $Temp$, $cool$, $K$ and $I$ as arguments.
3. When running the function, make sure the starting $E_{start}$ and final $E_{final}$ are printed to the screen.
4. Plot the resulting clusters, something like:

```{r, out.width='90%', fig.align='center',echo=FALSE}
knitr::include_graphics(rep("images/kmeans_base.png"))
```

Or if you're fancy:
```{r, out.width='90%', fig.align='center',echo=FALSE}
knitr::include_graphics(rep("images/ggplot.png"))
```


**This problem should take around 2 hours to complete**. 

